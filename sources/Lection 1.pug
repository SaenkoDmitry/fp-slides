section(data-state="front")
  h2#title-of-talk Функциональное программирование

section
  h3 Вопросы?
  img(src="./img/0-1.png" alt="Вопросы")
  p.fragment 4 ответа

section
  h3 Who?
  img(src="./img/0-2.jpg" alt="Гора")

section
  h3 WTF?
  table
    tr
      td(style="text-align: right;") Императивное программирование
      td Декларативное программирование
  img(src="./img/0-3.jpg" alt="Вопросы")

section
  p Синтетический пример
  table
    tr
      td
        pre(style="font-size: 0.4em; width: 100%")
          code.js.
            var m = [1,2,10,3], n = [];
            for (var i = 0; i < m.length; i++) {
              if (m[i] % 2 !== 0) {
                n.push(m[i] * 2);
              }
            }
            var a;
            if (m.length > 1) {
              a = n[0];
              for (i = 1; i < n.length; i++) {
                if (n[i] > a) {
                  a = n[i];
                }
              }
            } else {
              a = n[0] || -Infinity;
            }
            a;
      td
        pre(style="font-size: 0.4em; width: 100%")
          code.js.
            Math.max(
              ...[1,2,10,3]
                .filter(a => a % 2)
                .map(a => a * 2)
            )

section
  h4 Функциональные языки
  ul
    li LISP (Common LISP, Scheme)
    li Haskell, Elm
    li ML, Caml, O'Caml, F#
    li Scala
    li Erlang

section
  h4 Функциональные языки
  ul
    li C#
      br
      small (Paradigm(s) multi-paradigm: structured, imperative, object-oriented, event-driven,
        b  functional
        | , generic, reflective)
    li Javascript
      br
      small (Multi-paradigm: scripting, object-oriented (prototype-based), imperative,
        b  functional
        | )
    li Python
      br
      small (multi-paradigm: object-oriented, imperative,
        b  functional
        | , procedural, reflective)
    li Ruby
      br
      small (multi-paradigm: object-oriented, imperative, reflective,
        b  functional
        | )
    li Swift
      br
      small (multi-paradigm: protocol-oriented, object-oriented,
        b  functional
        | , imperative, block structured)
    li C++
      br
      small (Multi-paradigm:[1] procedural,
        b  functional
        | , object-oriented, generic) (C++11)

section
  h4 Зачем?
  img(src="./img/0-4.gif" alt="Зачем?" style="float: left")
  p
    p Java
    p 1C
    p C#

section
  h4 Ништяки
  ul
    li Вывод типов, привет var!
    li λ-выражения (анонимные функции)
    li Сопоставление с образцом
    li Деструктивное присваивание ([a,b] = [b,a])
    li Свёртки: Map / Reduce / ... , даже LINQ
    li ФВП
    li Рекурсия

section
  h4 quicksort C++
  pre(style="font-size: 0.4em; width: 100%")
    code.
      public static void qs(int[] A, int low, int high) {
        int i = low;
        int j = high;
        int x = A[(low+high)/2];
        do {
            while(A[i] < x) ++i;
            while(A[j] > x) --j;
            if(i <= j){
                int temp = A[i];
                A[i] = A[j];
                A[j] = temp;
                i++; j--;
            }
        } while(i <= j);

        if(low < j) qs(A, low, j);
        if(i < high) qs(A, i, high);
      }

section
  h4 quicksort haskell
  pre
    code.
    | qs [] = []
    | qs (x:xs) = (qs l) ++ [x] ++ (qs r)
    |   where (l,r) = partition (<x) xs

section
  h4 Нитшяки
  ul
    li Безопасность
    li Эффективность
    li Управляемость

section
  h4 Сборщик мусора
  img(src="./img/0-4.jpg" alt="Garbage collector")

section
  h4 Неизменяемость (immutability)
  p i = i + 1
  p i = ?
  img(src="./img/0-5.jpg" alt="Bang!")

section
  img(src="./img/0-2.png" alt="Parallel")

section
  h4 Отсутствие побочных эффектов (side-effects)
  img(src="./img/0-6.jpg" alt="Calmness")
  p.
    Если получилось скомпилировать программу,
    то с большой вероятностью она работает правильно

section
  h4 Что мы будем делать?
  img(src="./img/0-7.jpg" alt="Work")

section
  h4 Конкретика
  ul
    li 12 - 15 занятий
    li 3 - 4 лабы
    li полусеместровый контроль
    li Зачёт
    li Haskell
    li посещания, отмечания
    li контрольные (paper)

section
  h4 Что не будем делать
  ul
    li Рассмотривать процесс проектирования программ на хаскеле (но cabal!)
    li Заниматься реактивным программированием
    li Рассматривать процесс компиляции

section
  h4 Есть ли альтернатива?
  img(src="./img/0-8.jpg" alt="Alt")

section
  img(src="./img/0-9.jpg" alt="Martin Odersky")
  div Martin Odersky. Scala.
  div (7 weeks long)
  div Workload: 5-7 hours/week
  div https://www.coursera.org/course/progfun

section
  img(src="./img/0-10.jpg" alt="O'Caml")
  div Introduction to Functional Programming in OCaml
  div (6 weeks long)
  div Workload: 2-6 hours/week
  div https://www.fun-mooc.fr/courses/parisdiderot/56002S02/session02/about

section
  table
    tr
      td
        img(src="./img/0-11-0.jpg" alt="Book")
      td
        img(src="./img/0-11-1.jpg" alt="Book")
    tr
      td
        img(src="./img/0-11-2.jpg" alt="Book")
      td
        img(src="./img/0-11-3.jpg" alt="Book")

section
  ul
    li
      a tryhaskell.org
    li
      a http://learnyouahaskell.com/
    li
      a http://en.wikibooks.org/wiki/Haskell/YAHT
    li
      a http://acm.wustl.edu/functional/haskell.php
    li
      a http://www.haskell.org/haskellwiki/Tutorial
    li
      a http://www.haskell.org/haskellwiki/Hitchhikers_guide_to_Haskell
    li
      a http://www.willamette.edu/~fruehr/haskell/evolution.html

section
  h4 Installation
  ul
    li sudo apt-get install haskell-platform
    li yum install haskell-platform
    li haskell.org/platform
    li
      strike hugs, winhugs

section
  a https://github.com/agsh/fp-slides