section
  h4 Свёртки
  img(src='./img/8-0.jpg')

section
  h4 Свёртки
  pre
    code.hs.
      sum [] = 0
      sum (x:xs) = x + sum xs

      minList [] = 0
      minList (x:xs) = min x (minList xs)

      concat [] = []
      concat (xs:xss) = xs ++ (concat xss)

section
  h4 Свёртки
  pre
    code.hs.
      map f [] = []
      map f (x:xs) = f x : (map f xs)

      filter f [] = []
      filter f (x:xs) =
        if (f x)
        then x : (filter f xs)
        else filter f xs

section
  h4 Свёртки
  pre
    code.hs.
      any f [] = False
      any f (x:xs) = if (f x) then True else any f xs

      all f [] = True
      all f (x:xs) = if (f x) then all f xs else False


      any f (x:xs) = f x || any f xs
      all f (x:xs) = f x && all f xs

section
  h4 Правые свёртки
  pre
    code x1 # (x2 # (x3 # (... # u)))
  table
    tr
      th
      th #
      th u
    tr
      td sum
      td +
      td 0
    tr
      td maxList
      td max
      td 0 (-∞)
    tr
      td concat
      td ++
      td []
    tr
      td map
      td :
      td []
    tr
      td filter
      td `(\x r -> if (f x) then x:r else r)`
      td []
    tr
      td any
      td `(\x r -> f x || r)`
      td False
    tr
      td all
      td `(\x r -> f x && r)`
      td True

section
  pre
    code.hs.
      -- # -> hash -> h
      foldr h u [] = u
      foldr h u (x:xs) = h x (foldr h u xs)

      sum list = foldr (+) 0 list

      filter f list =
        foldr (\x r -> if (f x) then x:r else r) [] list

      -- concat, any, all - самостоятельно

section
  h4 Функции с аккумулятором
  pre
    code.hs.
      sum list = sum' list 0
        where
        sum' [] acc = acc
        sum' (x:xs) acc = sum' xs (acc+x)

      minList list = minList' list 0
        where
        minList' [] acc = acc
        minList' (x:xs) acc = minList' xs (min acc x)

section
  h4 Функции с аккумулятором
  pre
    code.hs.
      concat list = concat' list []
        where
        concat' [] acc = acc
        concat' (x:xs) acc = concat' xs (acc ++ x)

      reverse list = reverse' list []
        where
        reverse' [] acc = acc
        reverse' (x:xs) acc = reverse' xs (x:acc)

section
  h4 Левые свёртки
  pre
    code (((u # x1) # x2) # .. ) # xn
  table
    tr
      th
      th #
      th u
    tr
      td sum
      td +
      td 0
    tr
      td maxList
      td max
      td 0 (-∞)
    tr
      td concat
      td ++
      td []
    tr
      td reverse
      td :
      td []
    tr
      td any
      td `(\r x -> r || f x)`
      td False
    tr
      td all
      td `(\r x -> r && f x)`
      td True

section
  h4 Левые свёртки
  pre
    code.hs.
      foldl h u []     =  u
      foldl h u (x:xs) =  foldl h (h u x) xs

      foldl h u list = foldl' u list
        where
        foldl' u [] = u
        foldl' u (x:xs) = foldl' (h u x) xs

      sum list = foldl (+) 0 list

      reverse list = foldl (flip (:)) [] list

      concat list = foldl (++) [] list

section
  h4 Свёртки
  pre
    code.hs.
      foldl (+) 0 [1..10] == 55
      foldr (+) 0 [1..10] == 55

  p В чём подвох?
  p Какие типы у foldl и foldr?

  pre.fragment
    code.hs.
      foldl (-) 0 [1..10] == -55
      foldr (-) 0 [1..10] == -5

section
  h4 Свёртки
  pre
    code.hs.
      (((u # x1) # x2) # .. ) # xn
      x1 # (x2 # (x3 # (... # u)))
  p Когда результаты левой и правой свертки совпадают?

section
  h4 Свёртки
  p Список из 1 элемента: (u # x1) = (x1 # u)
  p ∀x: u # x = x # u (1)
  ul
    li # принимает аргументы одного типа
    li u коммутирует с каждым элементом этого типа
  p.
    u - не обязательно единица для #, но часто
    u = 0, 1, [], False, True...

section
  h4 Свёртки
  p Список из 3 элементов: ((u#a)#b)#c = a#(b#(c#u))
  p ∀a,b,c: (a#b)#c = a#(b#c) (2)
  p # - ассоциативная операция
  p (1) + (2) – результаты свёрток совпадают

section
  h4 Свёртки
  pre
    code.hs.
      foldl1, foldr1  :: (a -> a -> a) -> [a] -> a

      foldl1 f (x:xs)  =  foldl f x xs

      foldr1 f [x]     =  x
      foldr1 f (x:xs)  =  f x (foldr1 f xs)   -- ?

      sum list = foldl1 (+) list
      sum list = foldr1 (+) list

section
  h4 Свёртки
  pre
    code.hs.
      :set +s -- измерение времени

      foldl1 (+) [1..10000000]
      foldr1 (+) [1..10000000]

      const :: a → b → a

      foldl1 (const) [1..10000000]  ?
      foldr1 (const) [1..10000000]  ?

section
  h4 Префиксные суммы
  pre
    code.hs.
      scanr :: (a -> b -> b) -> b -> [a] -> [b]

      scanl :: (a -> b -> a) -> a -> [b] -> [a]

      -- вычсления последовательности промежуточных результатов свертки

section
  h4 Префиксные суммы
  pre
    code.hs.
      > scanl (+) 0 [1..10]
      [0,1,3,6,10,15,21,28,36,45,55]

      > scanr (+) 0 [1..10]
      [55,54,52,49,45,40,34,27,19,10,0]

      > scanl (-) 0 [1..10]
      [0,-1,-3,-6,-10,-15,-21,-28,-36,-45,-55]

      > scanr (-) 0 [1..10]
      [-5,6,-4,7,-3,8,-2,9,-1,10,0]

      -- попробуйте сами написать scanr и scanl

section
  h4 Префиксные суммы
  pre
    code.hs.
      scanr h u []     = [u]
      scanr h u (x:xs) = h x (head rest) : rest
        where rest = scanr h u xs

      scanl h u xs =
        u : (case xs of
          [] -> []
          (x:xs) -> scanl h (h u x) xs)

section
  h4 Функции над дерефьями
  ul
    li сумма элементов дерева
    li кол-во элементов дерева
    li из дерева в список

section
  h4 Функции над дерефьями
  pre
    code.hs.
      sumTree :: (Num a) => Tree a -> a
      sumTree EmptyTree = 0
      sumTree (Node a l r) = a + (sumTree l) + (sumTree r)

      countTree :: Tree a -> Int
      countTree EmptyTree = 0
      countTree (Node a l r) = 1 + (countTree l) + (countTree r)

      tree2list = см.пред.л.

section
  h4 Свёртки над деревьями
  pre
    code.hs.
      foldTree onEmpty _ EmptyTree = onEmpty
      foldTree onEmpty onNode (Node a l r) =
        onNode a (foldTree onEmpty onNode l)
          (foldTree onEmpty onNode r)

section
  h4 Свёртки над деревьями
  pre
    code.hs.
      sumTree tree = foldTree 0 (\a l r -> a + l + r) tree

      countTree = foldTree 0 (\a l r -> 1 + l + r)

      tree2list = ?
    code.hs.fragment.
      tree2list = foldTree [] (\a l r -> l ++ [a] ++ r)

section
  h4 Синтетический пример
  pre
    code.hs.
      data Doc = Text String
        | Picture [Bool]
        | Composite [Doc]
        deriving (Show)

section
  h4 Синтетический пример
  pre
    code.hs.
      Text s - создает text-doc из строки
      Picture img - создает picture-doc из массива бит
      Composite docs - создает composite-doc из списка частей
